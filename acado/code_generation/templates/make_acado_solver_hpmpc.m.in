function make_@MODULE_NAME@_solver( name )

	% Output file name, and also function name
	if (nargin > 0)
		fileOut = name;
	else
		fileOut = '@MODULE_NAME@_solver';
	end;

	% Check if BLASFEO and HPMPC are present
	if ~exist('blasfeo','dir')
		error('Directory blasfeo not found! Please download blasfeo and build shared library.');
	end
	if ~exist('hpmpc','dir')
		error('Directory hpmpc not found! Please download hpmpc and build shared library.');
	end
	if ~(exist('blasfeo/libblasfeo.so','file')  || exist('blasfeo/libblasfeo.a','file') || exist('blasfeo/blasfeo.dll','file'))
		error('Directory blasfeo is found, but the required shared library is not. Please build the shared library of blasfeo.');
	end
	if ~(exist('hpmpc/libhpmpc.so','file') || exist('hpmpc/libhpmpc.a','file') ||exist('hpmpc/hpmpc.dll','file'))
		error('Directory hpmpc is found, but the required shared library is not. Please build the shared library of hpmpc.');
	end

	% Root folder of code generation
	CGRoot = '.';

	% HPMPC source files
	qpHPMPCSources = [ ...
		'' ...
		];

	% Auto-generated files
	CGSources = [ ...
		'CGRoot/@MODULE_NAME@_solver_mex.c ' ...
		'CGRoot/@MODULE_NAME@_solver.c ' ...
		'CGRoot/@MODULE_NAME@_integrator.c ' ...
		'CGRoot/@MODULE_NAME@_auxiliary_functions.c ' ...
		'CGRoot/@MODULE_NAME@_hpmpc_interface.c ' ...
		];
	if (nargin > 1)
		CGSources = [CGSources extern];
	end

	% Adding additional linker flags for Linux
	ldFlags = '';
	if (isunix() && ~ismac())
		ldFlags = '''-lhpmpc -lblasfeo -lrt -Wl,-rpath=PWD/blasfeo,-rpath=PWD/hpmpc''';
	elseif (ispc)
		ldFlags = '-lhpmpc -lblasfeo -DWIN32';
	end;

	% Recipe for compilation
	CGRecipe = [ ...
		'mex -O' ....
		' -L./hpmpc -L./blasfeo' ...
		' -I. -I''CGRoot'' -I./blasfeo/include -I./hpmpc/include' ...
		' LDFLAGS=ldFlags' ...
		'  -D__MATLAB__ -DUSEMEXPRINTS -O CGSources qpHPMPCSources -output %s.%s' ...
		];


% Compilation
CGRecipe = regexprep(CGRecipe, 'ldFlags', ldFlags);
CGRecipe = regexprep(CGRecipe, 'CGSources', CGSources);
CGRecipe = regexprep(CGRecipe, 'qpHPMPCSources', qpHPMPCSources);
CGRecipe = regexprep(CGRecipe, 'CGRoot', CGRoot);
CGRecipe = regexprep(CGRecipe, 'PWD', pwd);

% disp( sprintf( CGRecipe, fileOut, mexext ) );
fprintf( 'compiling... ' );
eval( sprintf(CGRecipe, fileOut, mexext) );
fprintf( ['done! --> ' fileOut '.' mexext '\n'] );
disp( ['finished mexing ' fileOut '.' mexext '!'] );

% Copy blasfeo and hpmpc libraries
if(ispc)
    copyfile('blasfeo/blasfeo.dll','..');
    copyfile('hpmpc/hpmpc.dll','..');
end
